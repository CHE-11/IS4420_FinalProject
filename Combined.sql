USE master; 
GO

DROP DATABASE IF EXISTS FinalProject_Group8;
CREATE DATABASE FinalProject_Group8;
GO

USE FinalProject_Group8;

DROP TABLE IF EXISTS EMPLOYEES
CREATE TABLE EMPLOYEES (
    EmployeeID SMALLINT NOT NULL IDENTITY(1,1),
    SSN INT NOT NULL,
    FirstName VARCHAR(30) NOT NULL,
    MiddleName VARCHAR(30) DEFAULT NULL,
    LastName VARCHAR(30) NOT NULL,
    StreetAddress VARCHAR(35) NOT NULL,
    City VARCHAR(30) NOT NULL,
    StateCode VARCHAR(2) NOT NULL,
    ZipCode SMALLINT NOT NULL,
    Title VARCHAR(25) NOT NULL,
    StartDate DATETIME NOT NULL,
    EndDate DATETIME DEFAULT NULL,
    CONSTRAINT PK_Employees_EmployeeID PRIMARY KEY (EmployeeID)
);

DROP TABLE IF EXISTS WAREHOUSE_EMP
CREATE TABLE WAREHOUSE_EMP (
    EmployeeID SMALLINT NOT NULL,
    HourlyPay DECIMAL(5,2) NOT NULL,
    ForkliftCert VARCHAR(1) NOT NULL,
    CONSTRAINT PK_WAREHOUSE_EMP_EmployeeID PRIMARY KEY (EmployeeID)
);


DROP TABLE IF EXISTS TRUCKER
CREATE TABLE TRUCKER (
    EmployeeID SMALLINT NOT NULL,
    HourlyPay DECIMAL(5,2) NOT NULL,
    MilesDriven INT NOT NULL,
    PayPerMile DECIMAL(3,2) NOT NULL,
    CDL VARCHAR(1) NOT NULL ,
    CONSTRAINT PK_TRUCKER_EmployeeID PRIMARY KEY (EmployeeID)
);

DROP TABLE IF EXISTS SERVICE_MEMBER
CREATE TABLE SERVICE_MEMBER (
    EmployeeID SMALLINT NOT NULL,
    HourlyPay DECIMAL(5,2) NOT NULL,
    HomeCert VARCHAR(1) NOT NULL,
    CONSTRAINT PK_SERVICE_MEMBER_EmployeeID PRIMARY KEY (EmployeeID)
);

DROP TABLE IF EXISTS ADMINISTRATION
CREATE TABLE ADMINISTRATION (
    EmployeeID SMALLINT NOT NULL,
    Salary DECIMAL(10,2) NOT NULL,
    CONSTRAINT PK_ADMINISTRATION_EmployeeID PRIMARY KEY (EmployeeID)
);

DROP TABLE IF EXISTS SALES_REP
CREATE TABLE SALES_REP (
    EmployeeID SMALLINT NOT NULL,
    BaseSalary DECIMAL(8,2) NOT NULL,
    Commissions DECIMAL(10,2) NOT NULL,
    CONSTRAINT PK_SALES_REP_EmployeeID PRIMARY KEY (EmployeeID)
);


DROP TABLE IF EXISTS CUSTOMER
CREATE TABLE CUSTOMER (
    CustomerID SMALLINT NOT NULL,
    FirstName VARCHAR(25) NOT NULL,
    LastName VARCHAR(25) NOT NULL,
    BillingStreetAddress VARCHAR(50),
    BillingZipCode SMALLINT NOT NULL,
    BillingStateCode VARCHAR(2) NOT NULL,
    InsuranceCompany VARCHAR(40) DEFAULT NULL,
    InsuranceID INT DEFAULT NULL,
    CONSTRAINT PK_CUSTOMER_CustomerID PRIMARY KEY (CustomerID)
);

DROP TABLE IF EXISTS INDIVIDUAL
-- NEED TO FIX THIS
CREATE TABLE INDIVIDUAL (
    CustomerID SMALLINT NOT NULL
    --  <type>,
    --  <type>,
    CONSTRAINT PK_INDIVIDUAL_CustomerID PRIMARY KEY (CustomerID)
);

DROP TABLE IF EXISTS BUSINESS
CREATE TABLE BUSINESS (
    CustomerID SMALLINT NOT NULL,
    BusinessName VARCHAR(30) NOT NULL,
    BusinessType VARCHAR(30) NOT NULL,
    CONSTRAINT PK_BUSINESS_CustomerID PRIMARY KEY (CustomerID)
);

DROP TABLE IF EXISTS EMAIL
CREATE TABLE EMAIL (
    CustomerID SMALLINT NOT NULL,
    EmailAddress VARCHAR(254) NOT NULL,
    PrimaryEmailFlag VARCHAR(1) NOT NULL,
    CONSTRAINT PK_CustomerID_EmailAddress PRIMARY KEY (CustomerID, EmailAddress),
    CONSTRAINT FK_CustomerID_EmailAddress FOREIGN KEY (CustomerID) REFERENCES CUSTOMER (CustomerID)
);

DROP TABLE IF EXISTS PHONE_NUMBER
CREATE TABLE PHONE_NUMBER (
    CustomerID SMALLINT NOT NULL,
    PhoneNumber VARCHAR(254) NOT NULL,
    PrimaryNumberFlag VARCHAR(1) NOT NULL,
    CONSTRAINT PK_CustomerID_PhoneNumber PRIMARY KEY (CustomerID, PhoneNumber),
    CONSTRAINT FK_CustomerID_PhoneNumber FOREIGN KEY (CustomerID) REFERENCES CUSTOMER (CustomerID)
);


DROP TABLE IF EXISTS PRODUCT
CREATE TABLE PRODUCT (
    ProductID SMALLINT NOT NULL,
    ProductName VARCHAR(30) NOT NULL,
    ProductDescription VARCHAR(250) NOT NULL,
    SalesPrice DECIMAL(9, 2) NOT NULL,
    ProductionTime SMALLINT NOT NULL,
    CONSTRAINT PK_Product_ProductID PRIMARY KEY (ProductID)
);

DROP TABLE IF EXISTS PRODUCT_PRICE_HISTORY
CREATE TABLE PRODUCT_PRICE_HISTORY (
    ProductID SMALLINT NOT NULL,
    PriceChangeDate DATETIME NOT NULL,
    SalesPrice DECIMAL(9, 2) NOT NULL,
    CONSTRAINT PK_ProductPriceHistory_ProductID_PriceChangeDate PRIMARY KEY (ProductID, PriceChangeDate),
    CONSTRAINT FK_ProductPriceHistory_ProductID FOREIGN KEY (ProductID) REFERENCES PRODUCT (ProductID)
);

DROP TABLE IF EXISTS CUSTOMER_ORDER
CREATE TABLE CUSTOMER_ORDER (
    OrderID INT NOT NULL,
    CustomerID SMALLINT NOT NULL,
    EmployeeID SMALLINT NOT NULL,
    OrderDate DATE NOT NULL,
    OrderTime TIME NOT NULL,
    DeliveryAddress VARCHAR(50),
    DeliveryZipCode SMALLINT NOT NULL,
    DeliveryState VARCHAR(2) NOT NULL,
    CONSTRAINT PK_Orders_OrderID PRIMARY KEY (OrderID),
    CONSTRAINT FK_Orders_CustomerID FOREIGN KEY (CustomerID) REFERENCES CUSTOMER (CustomerID),
    CONSTRAINT FK_Orders_EmployeeID FOREIGN KEY (EmployeeID) REFERENCES EMPLOYEES (EmployeeID)
);

DROP TABLE IF EXISTS ORDER_PRODUCT
CREATE TABLE ORDER_PRODUCT (
    OrderProduct INT IDENTITY(1, 1) NOT NULL,
    OrderID INT NOT NULL,
    ProductID SMALLINT NOT NULL,
    Price DECIMAL (9, 2) NOT NULL,
    Quantity INT NOT NULL,
    CONSTRAINT PK_OrderProduct_OrderProduct PRIMARY KEY (OrderProduct),
    CONSTRAINT FK_OrderProduct_OrderID FOREIGN KEY (OrderID) REFERENCES CUSTOMER_ORDER (OrderID),
    CONSTRAINT FK_OrderProduct_ProductID FOREIGN KEY (ProductID) REFERENCES PRODUCT (ProductID)
);

DROP TABLE IF EXISTS SHIPMENT_LOCATION
CREATE TABLE SHIPMENT_LOCATION (
    ShipmentLocationID TINYINT NOT NULL,
    CONSTRAINT PK_ShipmentLocation_ShipmentLocationID PRIMARY KEY (ShipmentLocationID)
);

DROP TABLE IF EXISTS CORPORATE_TRUCKING
CREATE TABLE CORPORATE_TRUCKING (
    ShipmentLocationID TINYINT NOT NULL,
    CorporateTruckID TINYINT NOT NULL,
    CONSTRAINT PK_CorporateTrucking_ShipmentLocationID PRIMARY KEY (ShipmentLocationID)
);

DROP TABLE IF EXISTS WAREHOUSE
CREATE TABLE WAREHOUSE (
    ShipmentLocationID TINYINT NOT NULL,
    BinNumber SMALLINT NOT NULL,
    AisleNumber SMALLINT NOT NULL,
    COnstraint PK_WAREHOUSE_ShipmentLocationID PRIMARY KEY (ShipmentLocationID)
);

DROP TABLE IF EXISTS INTERNAL_TRUCK
CREATE TABLE INTERNAL_TRUCK (
    ShipmentLocationID TINYINT NOT NULL,
    InternalTruckID TINYINT NOT NULL,
    CONSTRAINT PK_INTERNAL_TRUCK_ShipmentLocationID PRIMARY KEY (ShipmentLocationID)
);

DROP TABLE IF EXISTS INTRASTATE_LINE
CREATE TABLE INTRASTATE_LINE (
    ShipmentLocationID TINYINT NOT NULL,
    LineID SMALLINT NOT NULL,
    LineName VARCHAR(30) NOT NULL,
    CONSTRAINT PK_INTRASTATE_LINE_ShipmentLocationID_LineID PRIMARY KEY (ShipmentLocationID, LineID),
    CONSTRAINT FK_INTRASTATE_LINE_ShipmentLocationID FOREIGN KEY (ShipmentLocationID) REFERENCES SHIPMENT_LOCATION (ShipmentLocationID)
);

DROP TABLE IF EXISTS PRODUCT_LOCATION
CREATE TABLE PRODUCT_LOCATION (
    OrderProduct INT NOT NULL,
    ShipmentLocationID TINYINT NOT NULL,
    CONSTRAINT PK_ProductLocation_OrderProduct_ShipmentLocationID PRIMARY KEY (OrderProduct, ShipmentLocationID),
    CONSTRAINT FK_ProductLocation_OrderProduct FOREIGN KEY (OrderProduct) REFERENCES ORDER_PRODUCT (OrderProduct),
    CONSTRAINT FK_ProductLocation_ShipmentLocationID FOREIGN KEY (ShipmentLocationID) REFERENCES SHIPMENT_LOCATION (ShipmentLocationID)
);
         

---

-------------------------------- All Table Names --------------------------------
-- EMPLOYEES
-- WAREHOUSE_EMP
-- TRUCKER
-- SERVICE_MEMBER
-- ADMINISTRATION
-- SALES_REP

-- CUSTOMER
-- INDIVIDUAL
-- BUSINESS
-- EMAIL
-- PHONE_NUMBER

-- PRODUCT
-- PRODUCT_PRICE_HISTORY

-- CUSTOMER_ORDER
-- ORDER_PRODUCT

-- PRODUCT_LOCATION

-- SHIPMENT_LOCATION
-- CORPORATE_TRUCKING
-- WAREHOUSE
-- INTERNAL_TRUCK
-- INTRASTATE_LINE

-------------------------------- All Table Names --------------------------------
USE FinalProject_Group8;
GO

-- EMPLOYEES
INSERT INTO EMPLOYEES (SSN,FirstName,MiddleName,LastName,StreetAddress,City,StateCode,ZipCode,Title,StartDate,EndDate)
VALUES (123456789, 'John', '', 'Doe', '123 Main St', 'Anytown', 'CA', 12345, 'Manager', '1/1/2000', '2001-12-17');

-- WAREHOUSE_EMP
SELECT * FROM EMPLOYEES
INSERT INTO WAREHOUSE_EMP (EmployeeID,HourlyPay,ForkliftCert)
VALUES 
	(1, 10, 'Y'), 
	(2, 10, 'Y');

-- TRUCKER
SELECT * FROM EMPLOYEES
INSERT INTO TRUCKER (EmployeeID,HourlyPay,MilesDriven,PayPerMile,CDL)
VALUES (2, 15.2, 100, 1.1, 'Y');

-- SERVICE_MEMBER
SELECT * FROM EMPLOYEES
INSERT INTO SERVICE_MEMBER (EmployeeID,HourlyPay,HomeCert)
VALUES (3, 20.2, 'Y');

-- ADMINISTRATION
SELECT * FROM EMPLOYEES
INSERT INTO ADMINISTRATION (EmployeeID,Salary)
VALUES (4, 25000.00);

-- SALES_REP
SELECT * FROM EMPLOYEES
INSERT INTO SALES_REP (EmployeeID,BaseSalary,Commissions)
VALUES (5, 30000.00, 1000.00);


-- CUSTOMER
INSERT INTO CUSTOMER (CustomerID,FirstName,LastName, BillingStreetAddress,BillingStateCode, BillingZipCode, InsuranceCompany, InsuranceID)
VALUES (1, 'John', 'Doe', '123 Main St','UT', 12345, 'AIG', 123456789);

-- FIX
-- FIX
-- INDIVIDUAL
-- SELECT * FROM CUSTOMER
-- INSERT INTO INDIVIDUAL (CustomerID,)
-- VALUES 
-- FIX
-- FIX


-- BUSINESS
SELECT * FROM CUSTOMER
INSERT INTO BUSINESS (CustomerID,BusinessName,BusinessType)
VALUES (2, 'ABC Company', 'ABC');

-- EMAIL
SELECT * FROM CUSTOMER
INSERT INTO EMAIL (CustomerID,EmailAddress, PrimaryEmailFlag)
VALUES (1, 'Coolguy123@gmail.com', 'Y');

-- PHONE_NUMBER
SELECT * FROM CUSTOMER
INSERT INTO PHONE_NUMBER (CustomerID,PhoneNumber, PrimaryNumberFlag)
VALUES (1, '1234567890', 'Y');

-- PRODUCT
INSERT INTO PRODUCT (ProductID,ProductName,ProductDescription,SalesPrice,ProductionTime)
VALUES (1, 'Forklift', 'A forklift', 100, 1);

-- PRODUCT_PRICE_HISTORY
SELECT * FROM PRODUCT
INSERT INTO PRODUCT_PRICE_HISTORY (ProductID,PriceChangeDate,SalesPrice)
VALUES (1, '1/1/2000', 100);

-- CUSTOMER_ORDER
INSERT INTO CUSTOMER_ORDER (OrderID,CustomerID,EmployeeID,OrderDate,OrderTime,DeliveryAddress,DeliveryZipCode,DeliveryState)
VALUES (1, 1, 1, '1/1/2000', '1:00 PM', '123 Main St', 12345, 'CA');




------------------------------------
-- STUCK HERE

-- ORDER_PRODUCT
INSERT INTO ORDER_PRODUCT (OrderID,ProductID,Price,Quantity)
VALUES (1, 1, 100, 1);


-- SHIPMENT_LOCATION
INSERT INTO SHIPMENT_LOCATION (ShipmentLocationID)
VALUES (1);


-- PRODUCT_LOCATION
SELECT * FROM ORDER_PRODUCT
INSERT INTO PRODUCT_LOCATION (OrderProduct,ShipmentLocationID)
VALUES (1, 1);


-- STUCK HERE
------------------------------------


-- CORPORATE_TRUCKING
SELECT * FROM SHIPMENT_LOCATION
INSERT INTO CORPORATE_TRUCKING (ShipmentLocationID,CorporateTruckID)
VALUES (1, 1);

-- WAREHOUSE
SELECT * FROM SHIPMENT_LOCATION
INSERT INTO WAREHOUSE (ShipmentLocationID,BinNumber,AisleNumber)
VALUES (1, 1, 1);

-- INTERNAL_TRUCK
SELECT * FROM SHIPMENT_LOCATION
INSERT INTO INTERNAL_TRUCK (ShipmentLocationID,InternalTruckID)
VALUES (1, 1);

-- INTRASTATE_LINE
SELECT * FROM SHIPMENT_LOCATION
INSERT INTO INTRASTATE_LINE (ShipmentLocationID,LineID,LineName)
VALUES (1, 1, 'A');
